# Foxic Theme Shoppi Website

This project provides a PHP front‑end that connects to the Shoppi API in order to build a multi‑language e‑commerce website.

## Prerequisites

* PHP 7.4 or later
* [Composer](https://getcomposer.org/) (for vendor libraries)
* Memcache server for caching and cart/checkout data
* A Shoppi account with an active store

## Installation

1. Clone the repository and run `composer install` to fetch PHP dependencies.
2. Copy `.env.example` to `.env` and set required variables:
   - `STRIPE_SECRET_KEY` – your Stripe restricted API key
   - `APP_LANG` – default language (e.g. `en`)
   - `DB_DRIVER` – `memcache` or `local`
   - `MEMCACHE_HOST`, `MEMCACHE_PORT` – Memcache server
3. Configure your web server to serve the project root and enable URL rewriting as provided in `.htaccess`.
4. Ensure Memcache is running and accessible.
5. Point the domain configured in Shoppi to this installation.

## Usage

The application will automatically load language strings based on the `lang` query parameter or the value stored in the session. Checkout is handled through the Stripe API using the key configured in the environment file.

### Localization

Translation files live in `app/lang`. Create additional files using the ISO code as the filename (e.g. `fr.php`) returning an associative array of translation keys. The header uses the keys `home` and `cart` for navigation text.

## Search Plugin

Client-side search queries `/plugins/search.php` which proxies the Shoppi API and caches results in Memcache. Results are rendered using Handlebars templates in `page/js/search.js`.

## Hosting

Need hosting? Visit [shoppi.cloud](https://www.shoppi.cloud).

## MVC Structure

The application now follows a simple MVC approach. Controllers live in `app/controllers`, templates in `app/views`, and a small `View` class handles rendering. Entry scripts (`index.php`, `product.php`, `page.php`) simply delegate to their respective controllers.

## Front-End Assets

Bootstrap, jQuery, lazysizes plugins and Font Awesome fonts are not stored in the repository. Run `scripts/install_assets.sh` to download these assets before serving the site. The script places the files under `css/vendor`, `js/vendor`, `js/vendor-special`, and `fonts/icomoon`.

Font files are omitted from the repository due to binary size limitations.
